The History of JavaScript
JavaScript is everywhere, and for the seventh year in a row, it has been ranked the most commonly used programming language, with 67.8% of developers employing it in 2019. Its ascent to the world’s most popular programming language is synonymous with the rise of the internet itself.

Created out of necessity, it is used to build 95.2% (1.52 billion) of websites today, including some of the world’s largest, like Facebook and YouTube. Without it, we would not have popular and useful web apps such as Google Maps and eBay. 

So, without further ado, let’s take a look at what JavaScript is,  how and why it was created, and what’s next for the language.

What Is JavaScript?
JavaScript is a scripting language that is one of the three core languages used to develop websites. Whereas HTML and CSS give a website structure and style, JavaScript lets you add functionality and behaviors to your website, allowing your website’s visitors to interact with content in many imaginative ways.

JavaScript is primarily a client-side language, meaning it runs on your computer within your browser. However, more recently the introduction of Node.js has allowed JavaScript to also execute code on servers.

Since its release, JavaScript has surpassed Java, Flash, and other languages because it is relatively easy to learn, has a free and open community, and, most importantly, is incredibly useful, allowing developers to quickly create apps with audiences in the millions
The early to mid-1990s was an important time for the internet. Key players like Netscape and Microsoft were in the midst of browser wars, with Netscape’s Navigator and Microsoft’s Internet Explorer going head to head.

In September 1995, a Netscape programmer named Brandan Eich developed a new scripting language in just 10 days. It was originally named Mocha, but quickly became known as LiveScript and, later, JavaScript.
The early to mid-1990s was an important time for the internet. Key players like Netscape and Microsoft were in the midst of browser wars, with Netscape’s Navigator and Microsoft’s Internet Explorer going head to head.

In September 1995, a Netscape programmer named Brandan Eich developed a new scripting language in just 10 days. It was originally named Mocha, but quickly became known as LiveScript and, later, JavaScript.
Following a 2008 event in Oslo, the ECMAScript 4 proposals were scaled back by many organizations and parties involved with JavaScript, including Yahoo, Google, and Microsoft. The project was codenamed Harmony and it came to fruition in 2015, when ECMAScript 6 was released.

In 2009, the CommonJS project set out to define and promote JavaScript development outside the browser by using modules to package useful code and functionality. This paved the way for Node.js as an environment to run browserless JavaScript. Now the language that ran the frontend of the internet was able to tackle the servers behind the scenes.
From its slightly rocky start, JavaScript has risen to be the most popular programming language in the world. According to GitHub’s 2018 Octoverse report, there are more JavaScript code repositories than any other language—and that number is steadily on the rise.

A series of JavaScript frameworks and libraries, such as Ember, Angular, React, and Vue, have been developed to allow powerful and complicated web applications to be written using small teams within short time spans. Alongside client and server software, it is now even possible to write native mobile apps using JavaScript. Unsurprisingly, this is becoming increasingly popular due to the ability to share code between the worlds of mobile and web.

With all this choice, it’s somewhat understandable that there has also been a movement toward a more grassroots, “vanilla” implementation of JavaScript. Web components, small reusable custom browser elements, are the latest challenger aiming to be the next breakthrough in the JavaScript world. Whatever the next big thing is, it’s clear that JavaScript is going to be with us for many years to come.

If you’re interested in exploring other programming languages, consider Springboard’s free learning path Introduction to Machine Learning in Python and join a rapidly growing group of over 17,000 learners spread across the planet. 